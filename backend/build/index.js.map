{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["'use strict';\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fs_1 = __importDefault(require(\"fs\"));\r\nconst path_1 = __importDefault(require(\"path\"));\r\nconst Server_1 = __importDefault(require(\"./config/Server\"));\r\nconst FormattedDate_1 = __importDefault(require(\"./utils/FormattedDate\"));\r\nconst httpServer = new Server_1.default();\r\nhttpServer.server.then((server) => {\r\n    server.listen(httpServer.port);\r\n    server.on('error', onError);\r\n    server.on('listening', onListening);\r\n    server.setTimeout(0);\r\n    function onError(error) {\r\n        if (error.syscall !== 'listen')\r\n            throw error;\r\n        const bind = (typeof httpServer.port === 'string') ? 'Pipe ' + httpServer.port : 'Porta ' + httpServer.port;\r\n        switch (error.code) {\r\n            case 'EACCES':\r\n                httpServer.closeDatabase();\r\n                console.error(`[ ${FormattedDate_1.default.formattedDate} ] : ${bind} requer privilégios elevados de acesso`);\r\n                fs_1.default.appendFileSync(path_1.default.join(__dirname, '../logs/server.log'), `[ ${FormattedDate_1.default.formattedDate} ] : ${bind} requer privilégios elevados de acesso \\r\\n`);\r\n                process.exit(1);\r\n                break;\r\n            case 'EADDRINUSE':\r\n                httpServer.closeDatabase();\r\n                console.log(`[ ${FormattedDate_1.default.formattedDate} ] : ${bind} já está em uso`);\r\n                fs_1.default.appendFileSync(path_1.default.join(__dirname, '../logs/server.log'), `[ ${FormattedDate_1.default.formattedDate} ] : ${bind} já está em uso \\r\\n`);\r\n                process.exit(1);\r\n                break;\r\n            default:\r\n                httpServer.closeDatabase();\r\n                throw error;\r\n        }\r\n    }\r\n    function onListening() {\r\n        const addr = server.address();\r\n        if (addr) {\r\n            const bind = (typeof addr === 'string') ? `pipe ${addr}` : `porta ${addr.port}`;\r\n            console.log(`[ ${FormattedDate_1.default.formattedDate} ] : Servidor rodando na ${bind}`);\r\n            fs_1.default.appendFileSync(path_1.default.join(__dirname, '../logs/server.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Servidor rodando na ${bind} \\r\\n`);\r\n        }\r\n    }\r\n})\r\n    .catch((err) => {\r\n    console.log(`[ ${FormattedDate_1.default.formattedDate} ] : Não foi possível inicializar o servidor ${err.stack}`);\r\n    fs_1.default.appendFileSync(path_1.default.join(__dirname, '../logs/server.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Não foi possível inicializar o servidor ${err.stack} \\r\\n`);\r\n});\r\n//# sourceMappingURL=index.js.map"],"file":"index.js"}