{"version":3,"names":[],"mappings":"","sources":["config/Database.js"],"sourcesContent":["'use strict';\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nrequire(\"dotenv/config\");\r\nconst fs_1 = __importDefault(require(\"fs\"));\r\nconst path_1 = __importDefault(require(\"path\"));\r\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\r\nconst FormattedDate_1 = __importDefault(require(\"../utils/FormattedDate\"));\r\n/**\r\n * Classe responsável por configurar o banco de dados via Mongoose\r\n */\r\nclass Database {\r\n    /**\r\n       * @construtor Constrói a instância do banco de dados\r\n       */\r\n    constructor() {\r\n        this._database = mongoose_1.default.connect(`${process.env.MONGO_DB_URL}/${process.env.MONGO_DB_DATABASE}`);\r\n    }\r\n    get database() {\r\n        return this._database;\r\n    }\r\n    /**\r\n       * Método que conecta ao banco de dados do MongoDB\r\n       */\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._database.then(database => {\r\n                database.connection.on('connected', () => {\r\n                    console.error(`[ ${FormattedDate_1.default.formattedDate} ] : Conexão estabelecida com sucesso`);\r\n                    fs_1.default.appendFileSync(path_1.default.join(__dirname, '../../logs/server.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Conexão estabelecida com sucesso \\r\\n`);\r\n                });\r\n            });\r\n            this._database.then(database => {\r\n                database.connection.on('disconnected', () => {\r\n                    console.error(`[ ${FormattedDate_1.default.formattedDate} ] : Conexão desconectada`);\r\n                    fs_1.default.appendFileSync(path_1.default.join(__dirname, '../../logs/server.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Conexão desconectada \\r\\n`);\r\n                });\r\n            });\r\n            this._database.then(database => {\r\n                database.connection.on('error', () => {\r\n                    console.error(`[ ${FormattedDate_1.default.formattedDate} ] : Erro de conexão`);\r\n                    fs_1.default.appendFileSync(path_1.default.join(__dirname, '../../logs/error.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Erro de conexão \\r\\n`);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n       * Método que encerra a conexão\r\n       */\r\n    closeConnection() {\r\n        process.on('SIGINT', () => {\r\n            this._database.then(database => {\r\n                database.connection.close(() => {\r\n                    console.error(`[ ${FormattedDate_1.default.formattedDate} ] : Mongoose encerrado`);\r\n                    fs_1.default.appendFileSync(path_1.default.join(__dirname, '../../logs/server.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Mongoose encerrado \\r\\n`);\r\n                    process.exit(0);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.default = new Database();\r\n//# sourceMappingURL=Database.js.map"],"file":"Database.js"}