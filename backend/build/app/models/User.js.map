{"version":3,"names":[],"mappings":"","sources":["app/models/User.js"],"sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nrequire(\"dotenv/config\");\r\nconst bcrypt_1 = __importDefault(require(\"bcrypt\"));\r\nconst UserModelError_1 = __importDefault(require(\"../../errors/UserModelError\"));\r\nclass User {\r\n    setName(name) {\r\n        if (name.trim() === '') {\r\n            throw new UserModelError_1.default(400, 'O nome não pode estar vazio');\r\n        }\r\n        if (name.length > 5 && name.length < 50) {\r\n            this._name = name;\r\n        }\r\n        else {\r\n            throw new UserModelError_1.default(400, 'O nome de usuário deve ter entre 5 e 50 caracteres');\r\n        }\r\n    }\r\n    setAvatar(avatar) {\r\n        this._avatar = avatar;\r\n    }\r\n    setUserName(username) {\r\n        // eslint-disable-next-line\r\n        const re = /^(?=.*[a-z])([a-z]{3,10})+([.\\-_]{0,1})+([a-z0-9]{3,20})$/;\r\n        if (username.length < 3 || username.length > 50) {\r\n            throw new UserModelError_1.default(400, 'O username deve ter entre 3 e 50 caracteres');\r\n        }\r\n        if (re.test(username)) {\r\n            this._username = username;\r\n        }\r\n        else {\r\n            throw new UserModelError_1.default(400, 'O username deve ter apenas letras minúsculas, números, ponto, hífen ou underline');\r\n        }\r\n    }\r\n    setEmail(email) {\r\n        // eslint-disable-next-line\r\n        const re = /^(([^<>()[\\].,;:\\s@\"]+(.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\r\n        if (re.test(email)) {\r\n            this._email = email;\r\n        }\r\n        else {\r\n            throw new UserModelError_1.default(400, 'E-mail inválido');\r\n        }\r\n    }\r\n    setPassword(password) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // eslint-disable-next-line\r\n            const re = /(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&\\)\\({}#%])[A-Za-z\\d@$!%*?&\\)\\({}#%]{8,10}/;\r\n            if (re.test(password)) {\r\n                const saltRounds = parseInt(process.env.BCRYPT_SALT_ROUNDS);\r\n                const passwordHashed = yield bcrypt_1.default.hash(password, saltRounds);\r\n                this._password = passwordHashed;\r\n            }\r\n            else {\r\n                throw new UserModelError_1.default(400, 'Senha inválida. A senha precisa ter entre 8 e 10 caracteres, com ao menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial');\r\n            }\r\n        });\r\n    }\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    get avatar() {\r\n        return this._avatar;\r\n    }\r\n    get userName() {\r\n        return this._username;\r\n    }\r\n    get email() {\r\n        return this._email;\r\n    }\r\n    get password() {\r\n        return this._password;\r\n    }\r\n}\r\nexports.default = User;\r\n//# sourceMappingURL=User.js.map"],"file":"User.js"}