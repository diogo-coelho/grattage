{"version":3,"names":[],"mappings":"","sources":["app/controllers/AuthenticationController.js"],"sourcesContent":["'use strict';\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fs_1 = __importDefault(require(\"fs\"));\r\nconst path_1 = __importDefault(require(\"path\"));\r\nconst FormattedDate_1 = __importDefault(require(\"../../utils/FormattedDate\"));\r\nconst UserDAO_1 = __importDefault(require(\"../models/UserDAO\"));\r\nconst User_1 = __importDefault(require(\"../models/User\"));\r\nconst CustomError_1 = __importDefault(require(\"../../errors/CustomError\"));\r\nconst JsonWebToken_1 = __importDefault(require(\"../middleware/JsonWebToken\"));\r\nconst bcrypt_1 = __importDefault(require(\"bcrypt\"));\r\nclass AuthenticationController {\r\n    /**\r\n     * Método que cria um usuário no banco de dados\r\n     */\r\n    create(req, res) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                console.log(`[ ${FormattedDate_1.default.formattedDate} ] : Nova requisição de criação de usuário`);\r\n                fs_1.default.appendFileSync(path_1.default.join(__dirname, '../../../logs/authentication.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Nova requisição de criação de usuário \\r\\n`);\r\n                const user = new User_1.default();\r\n                user.setName(req.body.name);\r\n                user.setUserName(req.body.username);\r\n                user.setEmail(req.body.email);\r\n                yield user.setPassword(req.body.password);\r\n                const userHasAlreadyBeenCreated = yield AuthenticationController._userDAO.model.find({\r\n                    $or: [\r\n                        { _username: user.userName },\r\n                        { _email: user.email }\r\n                    ]\r\n                });\r\n                if (userHasAlreadyBeenCreated.length > 0) {\r\n                    throw new CustomError_1.default(409, 'Usuário existente');\r\n                }\r\n                const record = yield AuthenticationController._userDAO.model.create(Object.assign(Object.assign({}, user), { created_at: new Date(), updated_at: new Date() }));\r\n                console.log(`[ ${FormattedDate_1.default.formattedDate} ] : Fim da requisição de criação de usuário`);\r\n                fs_1.default.appendFileSync(path_1.default.join(__dirname, '../../../logs/authentication.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Fim da requisição de criação de usuário \\r\\n`);\r\n                res.status(201).json({ _id: record._id });\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n                res.status(err.status).json({ statusCode: err._status, message: err._message, stack: err._stack });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Método que autentica um usuário no sistema e retorna um token de acesso\r\n     */\r\n    login(req, res) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                console.log(`[ ${FormattedDate_1.default.formattedDate} ] : Nova requisição de login`);\r\n                fs_1.default.appendFileSync(path_1.default.join(__dirname, '../../../logs/authentication.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Nova requisição de login \\r\\n`);\r\n                if (!req.body.password || (!req.body.username && !req.body.email))\r\n                    throw new CustomError_1.default(400, 'Parâmetros incorretos');\r\n                const user = new User_1.default();\r\n                if (req.body.username)\r\n                    user.setUserName(req.body.username);\r\n                if (req.body.email)\r\n                    user.setEmail(req.body.email);\r\n                const userFound = yield AuthenticationController._userDAO.model.findOne({\r\n                    $or: [\r\n                        { _username: user.userName },\r\n                        { _email: user.email }\r\n                    ]\r\n                });\r\n                if (!userFound)\r\n                    throw new CustomError_1.default(401, 'Credenciais inválidas');\r\n                const isValidPassword = yield bcrypt_1.default.compare(req.body.password, userFound._password);\r\n                if (!isValidPassword)\r\n                    throw new CustomError_1.default(401, 'Credenciais inválidas');\r\n                const token = new JsonWebToken_1.default().getToken({ name: userFound._name, username: userFound._username, email: userFound._email });\r\n                console.log(`[ ${FormattedDate_1.default.formattedDate} ] : Fim da requisição de login`);\r\n                fs_1.default.appendFileSync(path_1.default.join(__dirname, '../../../logs/authentication.log'), `[ ${FormattedDate_1.default.formattedDate} ] : Fim da requisição de login \\r\\n`);\r\n                res.status(200).json({ token });\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n                res.status(err.status).json({ statusCode: err._status, message: err._message, stack: err._stack });\r\n            }\r\n        });\r\n    }\r\n}\r\nAuthenticationController._userDAO = new UserDAO_1.default();\r\nexports.default = AuthenticationController;\r\n//# sourceMappingURL=AuthenticationController.js.map"],"file":"AuthenticationController.js"}